{"version":3,"sources":["Components/Displaycard.js","Components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["Displaycard","data","react_default","a","createElement","className","src","photo","alt","emailid","Projects","class","id","Components_Displaycard","Component","App","Components_Projects","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAaiBA,MAVjB,SAAqBC,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAOL,EAAKM,MAAOC,IAAI,gBAC5BN,EAAAC,EAAAC,cAAA,YAAOH,EAAKQ,YC6BPC,mLA/BX,OACJR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKO,MAAM,aACNT,EAAAC,EAAAC,cAAA,OAAKO,MAAM,OAAQC,GAAG,WAClBV,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,0BACVF,EAAAC,EAAAC,cAAA,WAEPF,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACS,EAAD,CAAaN,MAAQ,0GAA0GE,QAAU,qBAE5IP,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACS,EAAD,CAAaN,MAAQ,0GAA0GE,QAAU,qBAC7IP,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACS,EAAD,CAAaN,MAAQ,0GAA0GE,QAAU,qBAC5IP,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACS,EAAD,CAAaN,MAAQ,0GAA0GE,QAAU,qBAE3IP,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACS,EAAD,CAAaN,MAAQ,0GAA0GE,QAAU,iCArBtHK,aCYRC,mLAVX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACY,EAAD,cALUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d74abe7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Displaycard.css';\r\n\r\nfunction Displaycard(data) {\r\n    return(\r\n      <div className = \"profile\">\r\n        <div className= \"photo1\">\r\n          <img src = {data.photo} alt=\"Bijayalaxmi\"/>\r\n          <span>{data.emailid}</span>\r\n        </div>\r\n      </div> \r\n    );\r\n  }\r\n  export default Displaycard;\r\n","import React, { Component } from 'react';\r\nimport './Project.css';\r\nimport Displaycard from './Displaycard'\r\n\r\nclass Projects extends Component {\r\n  render() {\r\n    return (\r\n<div className=\"Projects\">\r\n<div className=\"col-md-3\">\r\n    <div class=\"col-md-12\">\r\n         <div class=\"card\"  id=\"style-1\" >\r\n             <div >\r\n               \r\n             <h4><b>Contributors</b></h4>\r\n\t\t\t\t\t\t\t<hr></hr>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n                \r\n<p>\r\n    <Displaycard photo = \"https://i.pinimg.com/236x/e2/72/e4/e272e4c7495706cf18f565e2c0d36078--baby-harry-potter-rainbow-baby.jpg\" emailid = \"yrdesai@asu.edu\"/>\r\n  </p>\r\n <p><Displaycard photo = \"https://i.pinimg.com/236x/e2/72/e4/e272e4c7495706cf18f565e2c0d36078--baby-harry-potter-rainbow-baby.jpg\" emailid = \"pchugh1@asu.edu\"/></p>\r\n<p><Displaycard photo = \"https://i.pinimg.com/236x/e2/72/e4/e272e4c7495706cf18f565e2c0d36078--baby-harry-potter-rainbow-baby.jpg\" emailid = \"bpanda1@asu.edu\"/></p>                    \r\n<p>\r\n    <Displaycard photo = \"https://i.pinimg.com/236x/e2/72/e4/e272e4c7495706cf18f565e2c0d36078--baby-harry-potter-rainbow-baby.jpg\" emailid = \"yrdesai@asu.edu\"/>\r\n  </p>\r\n  <p>\r\n    <Displaycard photo = \"https://i.pinimg.com/236x/e2/72/e4/e272e4c7495706cf18f565e2c0d36078--baby-harry-potter-rainbow-baby.jpg\" emailid = \"yrdesai@asu.edu\"/>\r\n  </p>\r\n\r\n \r\n             </div>\r\n         </div>\r\n    </div>\r\n</div>\r\n</div>\r\n    );\r\n  }\r\n}\r\nexport default Projects;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Projects from './Components/Projects';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <Projects>\r\n        </Projects>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}